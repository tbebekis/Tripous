         /// <include file='doc\UiGroup.uex' path='docs/doc[@for="UiGroup.UiColumnCollection"]/*' />
        /// <devdoc>
        ///    <para>[To be supplied.]</para>
        /// </devdoc>
        public class UiColumnCollection : IList {
            private UiGroup owner;
            /// A caching mechanism for key accessor
            /// We use an index here rather than control so that we don't have lifetime
            /// issues by holding on to extra references.
            private int lastAccessedIndex = -1;
 
            /// <include file='doc\UiGroup.uex' path='docs/doc[@for="UiGroup.UiColumnCollection.UiColumnCollection"]/*' />
            /// <devdoc>
            ///    <para>[To be supplied.]</para>
            /// </devdoc>            
            [SuppressMessage("Microsoft.Usage", "CA2208:InstantiateArgumentExceptionsCorrectly")]
            public UiColumnCollection( UiGroup owner ) {
                if (owner == null) {
                    throw new ArgumentNullException("owner");
                }
                this.owner = owner;
            }
 
            /// <include file='doc\UiGroup.uex' path='docs/doc[@for="UiGroup.UiColumnCollection.this"]/*' />
            /// <devdoc>
            ///    <para>[To be supplied.]</para>
            /// </devdoc>
            public virtual TabPage this[int index] {
                get {
                    return owner.GetTabPage(index);
                }
                set {
                    owner.SetTabPage(index, value, value.GetTCITEM());
                }
            }
 
            /// <include file='doc\UiGroup.uex' path='docs/doc[@for="UiColumnCollection.IList.this"]/*' />
            /// <internalonly/>
            object IList.this[int index] {
                get {
                    return this[index];
                }                
                [SuppressMessage("Microsoft.Usage", "CA2208:InstantiateArgumentExceptionsCorrectly")]
                [
                    SuppressMessage("Microsoft.Globalization", "CA1303:DoNotPassLiteralsAsLocalizedParameters") // value is the name of the param passed in.
                                                                                                                // So we don't have to localize it.
                ]
                set {
                    if (value is TabPage) {
                        this[index] = (TabPage)value;
                    }
                    else {
                        throw new ArgumentException("value");
                    }
                }
            }
            /// <include file='doc\UiGroup.uex' path='docs/doc[@for="UiGroup.UiColumnCollection.this"]/*' />
            /// <devdoc>
            ///     <para>Retrieves the child control with the specified key.</para>
            /// </devdoc>
            public virtual TabPage  this[string key] {
                get {
                    // We do not support null and empty string as valid keys.
                    if (string.IsNullOrEmpty(key)){
                        return null;
                    }
 
                    // Search for the key in our collection
                    int index = IndexOfKey(key);
                    if (IsValidIndex(index)) {
                        return this[index];
                    }
                    else {
                        return null;
                    }
 
                }
            }
 
 
            /// <include file='doc\UiGroup.uex' path='docs/doc[@for="UiGroup.UiColumnCollection.Count"]/*' />
            /// <devdoc>
            ///    <para>[To be supplied.]</para>
            /// </devdoc>
            [Browsable(false)]
            public int Count {
                get {
                    return owner.tabPageCount;
                }
            }
 
            /// <include file='doc\UiGroup.uex' path='docs/doc[@for="UiColumnCollection.ICollection.SyncRoot"]/*' />
            /// <internalonly/>
            object ICollection.SyncRoot {
                get {
                    return this;
                }
            }
 
            /// <include file='doc\UiGroup.uex' path='docs/doc[@for="UiColumnCollection.ICollection.IsSynchronized"]/*' />
            /// <internalonly/>
            bool ICollection.IsSynchronized {
                get {
                    return false;
                }
            }
 
            /// <include file='doc\UiGroup.uex' path='docs/doc[@for="UiColumnCollection.IList.IsFixedSize"]/*' />
            /// <internalonly/>
            bool IList.IsFixedSize {
                get {
                    return false;
                }
            }
 
            /// <include file='doc\UiGroup.uex' path='docs/doc[@for="UiGroup.UiColumnCollection.IsReadOnly"]/*' />
            /// <devdoc>
            ///    <para>[To be supplied.]</para>
            /// </devdoc>
            public bool IsReadOnly {
                get {
                    return false;
                }
            }
 
            /// <include file='doc\UiGroup.uex' path='docs/doc[@for="UiGroup.UiColumnCollection.Add"]/*' />
            /// <devdoc>
            ///    <para>[To be supplied.]</para>
            /// </devdoc>
            
            [SuppressMessage("Microsoft.Usage", "CA2208:InstantiateArgumentExceptionsCorrectly")]
            public void Add(TabPage value) {
 
                if (value == null) {
                    throw new ArgumentNullException("value");
                }
 
                owner.Controls.Add(value);
            }
 
            /// <include file='doc\UiGroup.uex' path='docs/doc[@for="UiColumnCollection.IList.Add"]/*' />
            /// <internalonly/>
            [
                SuppressMessage("Microsoft.Globalization", "CA1303:DoNotPassLiteralsAsLocalizedParameters") // value is the name of the param passed in.
                                                                                                            // So we don't have to localize it.
            ]
            
            [SuppressMessage("Microsoft.Usage", "CA2208:InstantiateArgumentExceptionsCorrectly")]
            int IList.Add(object value) {
                if (value is TabPage) {
                    Add((TabPage)value);
                    return IndexOf((TabPage)value);
                }
                else {
                    throw new ArgumentException("value");
                }
            }
 
            // <-- NEW ADD OVERLOADS FOR WHIDBEY
 
            /// <include file='doc\UiGroup.uex' path='docs/doc[@for="UiGroup.UiColumnCollection.Add1"]/*' />
            /// <devdoc>
            ///    <para>[To be supplied.]</para>
            /// </devdoc>
            public void Add(string text) {
                TabPage page = new TabPage();
                page.Text = text;
                Add(page);
            }
 
            /// <include file='doc\UiGroup.uex' path='docs/doc[@for="UiGroup.UiColumnCollection.Add2"]/*' />
            /// <devdoc>
            ///    <para>[To be supplied.]</para>
            /// </devdoc>
            public void Add(string key, string text) {
                TabPage page = new TabPage();
                page.Name = key;
                page.Text = text;
                Add(page);
            }
 
            /// <include file='doc\UiGroup.uex' path='docs/doc[@for="UiGroup.UiColumnCollection.Add3"]/*' />
            /// <devdoc>
            ///    <para>[To be supplied.]</para>
            /// </devdoc>
            public void Add(string key, string text, int imageIndex) {
                TabPage page = new TabPage();
                page.Name = key;
                page.Text = text;
                page.ImageIndex = imageIndex;
                Add(page);
            }
 
            /// <include file='doc\UiGroup.uex' path='docs/doc[@for="UiGroup.UiColumnCollection.Add4"]/*' />
            /// <devdoc>
            ///    <para>[To be supplied.]</para>
            /// </devdoc>
            public void Add(string key, string text, string imageKey) {
                TabPage page = new TabPage();
                page.Name = key;
                page.Text = text;
                page.ImageKey = imageKey;
                Add(page);
            }
 
            // END - NEW ADD OVERLOADS FOR WHIDBEY -->
 
            /// <include file='doc\UiGroup.uex' path='docs/doc[@for="UiGroup.UiColumnCollection.AddRange"]/*' />
            /// <devdoc>
            ///    <para>[To be supplied.]</para>
            /// </devdoc>            
            [SuppressMessage("Microsoft.Usage", "CA2208:InstantiateArgumentExceptionsCorrectly")]
            public void AddRange(TabPage[] pages) {
                if (pages == null) {
                    throw new ArgumentNullException("pages");
                }
                foreach(TabPage page in pages) {
                    Add(page);
                }
             }
 
            /// <include file='doc\UiGroup.uex' path='docs/doc[@for="UiGroup.UiColumnCollection.Contains"]/*' />
            /// <devdoc>
            ///    <para>[To be supplied.]</para>
            /// </devdoc>            
            [SuppressMessage("Microsoft.Usage", "CA2208:InstantiateArgumentExceptionsCorrectly")]
            public bool Contains(TabPage page) {
 
                //check for the page not to be null
                if (page == null)
                    throw new ArgumentNullException("value");
                //end check
 
                return IndexOf(page) != -1;
            }
 
            /// <include file='doc\UiGroup.uex' path='docs/doc[@for="UiColumnCollection.IList.Contains"]/*' />
            /// <internalonly/>
            bool IList.Contains(object page) {
                if (page is TabPage) {
                    return Contains((TabPage)page);
                }
                else {
                    return false;
                }
            }
 
           /// <include file='doc\UiGroup.uex' path='docs/doc[@for="UiGroup.UiColumnCollection.ContainsKey"]/*' />
           /// <devdoc>
           ///     <para>Returns true if the collection contains an item with the specified key, false otherwise.</para>
           /// </devdoc>
           public virtual bool ContainsKey(string key) {
                return IsValidIndex(IndexOfKey(key));
           }
 
 
            /// <include file='doc\UiGroup.uex' path='docs/doc[@for="UiGroup.UiColumnCollection.IndexOf"]/*' />
            /// <devdoc>
            ///    <para>[To be supplied.]</para>
            /// </devdoc>            
            [SuppressMessage("Microsoft.Usage", "CA2208:InstantiateArgumentExceptionsCorrectly")]
            public int IndexOf(TabPage page) {
 
                //check for the page not to be null
                if (page == null)
                    throw new ArgumentNullException("value");
                //end check
 
                for(int index=0; index < Count; ++index) {
                    if (this[index] == page) {
                        return index;
                    }
                }
                return -1;
            }
 
            /// <include file='doc\UiGroup.uex' path='docs/doc[@for="UiColumnCollection.IList.IndexOf"]/*' />
            /// <internalonly/>
            int IList.IndexOf(object page) {
                if (page is TabPage) {
                    return IndexOf((TabPage)page);
                }
                else {
                    return -1;
                }
            }
            /// <include file='doc\UiGroup.uex' path='docs/doc[@for="UiGroup.UiColumnCollection.this"]/*' />
            /// <devdoc>
            ///     <para>The zero-based index of the first occurrence of value within the entire CollectionBase, if found; otherwise, -1.</para>
            /// </devdoc>
            public virtual int  IndexOfKey(String key) {
                  // Step 0 - Arg validation
                if (string.IsNullOrEmpty(key)){
                    return -1; // we dont support empty or null keys.
                }
 
                // step 1 - check the last cached item
                if (IsValidIndex(lastAccessedIndex))
                {
                    if (WindowsFormsUtils.SafeCompareStrings(this[lastAccessedIndex].Name, key, /* ignoreCase = */ true)) {
                        return lastAccessedIndex;
                    }
                }
 
                // step 2 - search for the item
                for (int i = 0; i < this.Count; i ++) {
                    if (WindowsFormsUtils.SafeCompareStrings(this[i].Name, key, /* ignoreCase = */ true)) {
                        lastAccessedIndex = i;
                        return i;
                    }
                }
 
                // step 3 - we didn't find it.  Invalidate the last accessed index and return -1.
                lastAccessedIndex = -1;
                return -1;
           }
 
 
            /// <include file='doc\UiGroup.uex' path='docs/doc[@for="ToolBar.UiColumnCollection.Insert"]/*' />
            /// <devdoc>
            ///    <para>Inserts the supplied Tabpage at the given index.</para>
            /// </devdoc>
            public void Insert(int index, TabPage tabPage) {
                owner.InsertItem(index, tabPage);
                try {
                    // 247078 : See InsertingItem property
                    owner.InsertingItem = true;
                    owner.Controls.Add(tabPage);
                }
                finally {
                    owner.InsertingItem = false;
                }
                owner.Controls.SetChildIndex(tabPage, index);
            }
 
            /// <include file='doc\UiGroup.uex' path='docs/doc[@for="UiColumnCollection.IList.Insert"]/*' />
            /// <internalonly/>            
            [SuppressMessage("Microsoft.Usage", "CA2208:InstantiateArgumentExceptionsCorrectly")]
            [
                SuppressMessage("Microsoft.Globalization", "CA1303:DoNotPassLiteralsAsLocalizedParameters") // tabPage is the name of the param passed in.
                                                                                                            // So we don't have to localize it.
            ]
            void IList.Insert(int index, object tabPage) {
                if (tabPage is TabPage) {
                    Insert(index, (TabPage)tabPage);
                }
                else {
                    throw new ArgumentException("tabPage");
                }
            }
 
            // <-- NEW INSERT OVERLOADS FOR WHIDBEY
 
            /// <include file='doc\UiGroup.uex' path='docs/doc[@for="UiGroup.UiColumnCollection.Insert1"]/*' />
            /// <devdoc>
            ///    <para>[To be supplied.]</para>
            /// </devdoc>
            public void Insert(int index, string text) {
                TabPage page = new TabPage();
                page.Text = text;
                Insert(index, page);
            }
 
            /// <include file='doc\UiGroup.uex' path='docs/doc[@for="UiGroup.UiColumnCollection.Insert2"]/*' />
            /// <devdoc>
            ///    <para>[To be supplied.]</para>
            /// </devdoc>
            public void Insert(int index, string key, string text) {
                TabPage page = new TabPage();
                page.Name = key;
                page.Text = text;
                Insert(index, page);
            }
 
            /// <include file='doc\UiGroup.uex' path='docs/doc[@for="UiGroup.UiColumnCollection.Insert3"]/*' />
            /// <devdoc>
            ///    <para>[To be supplied.]</para>
            /// </devdoc>
            public void Insert(int index, string key, string text, int imageIndex) {
                TabPage page = new TabPage();
                page.Name = key;
                page.Text = text;
                Insert(index,page);
        		// ImageKey and ImageIndex require parenting...
        		page.ImageIndex = imageIndex;
            }
 
            /// <include file='doc\UiGroup.uex' path='docs/doc[@for="UiGroup.UiColumnCollection.Insert4"]/*' />
            /// <devdoc>
            ///    <para>[To be supplied.]</para>
            /// </devdoc>
            public void Insert(int index, string key, string text, string imageKey) {
                TabPage page = new TabPage();
                page.Name = key;
                page.Text = text;
                Insert(index, page);
        		// ImageKey and ImageIndex require parenting...
        		page.ImageKey = imageKey;
            }
 
            // END - NEW INSERT OVERLOADS FOR WHIDBEY -->
 
 
           /// <include file='doc\UiGroup.uex' path='docs/doc[@for="UiGroup.UiColumnCollection.IsValidIndex"]/*' />
           /// <devdoc>
           ///     <para>Determines if the index is valid for the collection.</para>
           /// </devdoc>
           /// <internalonly/>
           private bool IsValidIndex(int index) {
              return ((index >= 0) && (index < this.Count));
           }
 
            /// <include file='doc\UiGroup.uex' path='docs/doc[@for="UiGroup.UiColumnCollection.Clear"]/*' />
            /// <devdoc>
            ///    <para>[To be supplied.]</para>
            /// </devdoc>
            public virtual void Clear() {
                owner.RemoveAll();
            }
 
            /// <include file='doc\UiGroup.uex' path='docs/doc[@for="UiColumnCollection.ICollection.CopyTo"]/*' />
            /// <internalonly/>
            void ICollection.CopyTo(Array dest, int index) {
                if (Count > 0) {
                    System.Array.Copy(owner.GetTabPages(), 0, dest, index, Count);
                }
            }
 
            /// <include file='doc\UiGroup.uex' path='docs/doc[@for="UiGroup.UiColumnCollection.GetEnumerator"]/*' />
            /// <devdoc>
            ///    <para>[To be supplied.]</para>
            /// </devdoc>
            public IEnumerator GetEnumerator() {
                TabPage[] tabPages = owner.GetTabPages();
                if (tabPages != null) {
                    return tabPages.GetEnumerator();
                }
                else {
                    return new TabPage[0].GetEnumerator();
                }
            }
 
            /// <include file='doc\UiGroup.uex' path='docs/doc[@for="UiGroup.UiColumnCollection.Remove"]/*' />
            /// <devdoc>
            ///    <para>[To be supplied.]</para>
            /// </devdoc>
            
            [SuppressMessage("Microsoft.Usage", "CA2208:InstantiateArgumentExceptionsCorrectly")]
            public void Remove(TabPage value) {
 
                //check for the value not to be null
                if (value == null)
                    throw new ArgumentNullException("value");
                //end check
                owner.Controls.Remove(value);
            }
 
            /// <include file='doc\UiGroup.uex' path='docs/doc[@for="UiColumnCollection.IList.Remove"]/*' />
            /// <internalonly/>
            void IList.Remove(object value) {
                if (value is TabPage) {
                    Remove((TabPage)value);
                }
            }
 
            /// <include file='doc\UiGroup.uex' path='docs/doc[@for="UiGroup.UiColumnCollection.RemoveAt"]/*' />
            /// <devdoc>
            ///    <para>[To be supplied.]</para>
            /// </devdoc>
            public void RemoveAt(int index) {
                owner.Controls.RemoveAt(index);
            }
 
 
            /// <include file='doc\UiGroup.uex' path='docs/doc[@for="UiGroup.UiColumnCollection.RemoveByKey"]/*' />
            /// <devdoc>
            ///     <para>Removes the child control with the specified key.</para>
            /// </devdoc>
            public virtual void RemoveByKey(string key) {
                int index = IndexOfKey(key);
                if (IsValidIndex(index)) {
                    RemoveAt(index);
                 }
            }
 
        }